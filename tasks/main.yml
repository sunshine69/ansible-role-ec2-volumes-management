---
- name: Get tempfile
  tempfile:
    state: directory
  register: tempfile

- name: Create temporary symlink to the main python script to be sure the lambda function name match with filename
  file:
    path: "{{ tempfile.path }}/{{ lambda_function_name }}.py"
    src: "{{ role_path }}/files/ec2_vol_management.py"
    state: link

- name: Create zip file
  archive:
    path: "{{ tempfile.path }}/{{ lambda_function_name }}.py"
    dest: "{{ tempfile.path }}/{{ lambda_function_name }}.zip"
    format: zip

- include_role:
    name: ansible-role-aws-lambda
  vars:
    aws_lambda_profile: "{{ profile|default() }}"
    aws_lambda_region: "{{ region|default() }}"
    aws_lambda_function_name: "{{ lambda_function_name }}"
    aws_lambda_handler: "{{ lambda_function_name }}.lambda_handler"
    aws_lambda_runtime: "{{ lambda_runtime }}"
    aws_lambda_zip_file: "{{ tempfile.path }}/{{ lambda_function_name }}.zip"
    aws_lambda_iam_role: "{{ iam_role_name }}"
    aws_lambda_iam_role_policy: "{{ lookup('template', iam_role_name + '-policy.json.j2') }}"
    aws_lambda_iam_role_trust_policy: "{{ lookup('file', 'ec2-trust-policy.json') }}"
    aws_lambda_schedule_rule_name: "{{ lambda_function_name }}-cloudwatch-rule"
    aws_lambda_schedule_rule_description: "Run {{ lambda_function_name }}"
    aws_lambda_schedule_rule_expression: '{{ lambda_scheduled_rule_expression }}'
    aws_lambda_environment: "{{ lambda_environment }}"

- name: Cleanup tempfile
  file:
    path: "{{ tempfile.path }}"
    state: absent
